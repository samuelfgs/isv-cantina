// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eVCRKWwcuK6xExRdUZxKpb
// Component: rjwUuA4AwYcB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { SupabaseMutation } from "../../supabase/supabase"; // plasmic-import: RAfjAj2dBb8c/codeComponent
import { SupabaseFetcher } from "../../supabase/supabase"; // plasmic-import: jGc1XPhYG1oO/codeComponent
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";
import Select from "../../Select"; // plasmic-import: TQ2uLm_LONoV/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: WaoscXndZ0Zl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_cantina.module.css"; // plasmic-import: eVCRKWwcuK6xExRdUZxKpb/projectcss
import sty from "./PlasmicCardapio.module.css"; // plasmic-import: rjwUuA4AwYcB/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: uqgFXbTur-qO/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: LHAURlYRDEN8/icon

createPlasmicElementProxy;

export type PlasmicCardapio__VariantMembers = {};
export type PlasmicCardapio__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardapio__VariantsArgs;
export const PlasmicCardapio__VariantProps = new Array<VariantPropType>();

export type PlasmicCardapio__ArgsType = {};
type ArgPropType = keyof PlasmicCardapio__ArgsType;
export const PlasmicCardapio__ArgProps = new Array<ArgPropType>();

export type PlasmicCardapio__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  supabaseMutation?: Flex__<typeof SupabaseMutation>;
  dataProvider?: Flex__<typeof DataProvider>;
  product?: Flex__<typeof Select>;
  productVariant?: Flex__<typeof Select>;
  numberInput?: Flex__<typeof AntdInputNumber>;
  numberInput2?: Flex__<typeof AntdInputNumber>;
  button?: Flex__<typeof Button>;
};

export interface DefaultCardapioProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCardapio__RenderFunc(props: {
  variants: PlasmicCardapio__VariantsArgs;
  args: PlasmicCardapio__ArgsType;
  overrides: PlasmicCardapio__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedProduct",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "productVariant.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedVariant",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "product.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedVariant.stock;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "numberInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedVariant.price;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <div className={classNames(projectcss.all, sty.freeBox__juhP)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__caHP)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"80px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/cantina/images/logo.png",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eRkux
                  )}
                >
                  {"CANTINA"}
                </div>
              </div>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__oQtOs)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <React.Fragment>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__uavjz
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Novo pedido"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__dnNqg
                  )}
                  component={Link}
                  href={`/pedidos`}
                  platform={"nextjs"}
                >
                  {"Ver todos os pedidos"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__e43E
                  )}
                  component={Link}
                  href={`/cardapio`}
                  platform={"nextjs"}
                >
                  {"Estoque"}
                </PlasmicLink__>
              </React.Fragment>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__oeqTp)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <SupabaseMutation
            data-plasmic-name={"supabaseMutation"}
            data-plasmic-override={overrides.supabaseMutation}
            className={classNames("__wab_instance", sty.supabaseMutation)}
          >
            <DataCtxReader__>
              {$ctx => (
                <SupabaseFetcher
                  className={classNames(
                    "__wab_instance",
                    sty.supabaseFetcher__um2AZ
                  )}
                  name={"product"}
                  table={"product"}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <SupabaseFetcher
                        className={classNames(
                          "__wab_instance",
                          sty.supabaseFetcher__gk8IK
                        )}
                        name={"productVariant"}
                        table={"productvariant"}
                      >
                        <DataCtxReader__>
                          {$ctx => (
                            <DataProvider
                              data-plasmic-name={"dataProvider"}
                              data-plasmic-override={overrides.dataProvider}
                              className={classNames(
                                "__wab_instance",
                                sty.dataProvider
                              )}
                              data={(() => {
                                try {
                                  return $ctx.product.map(prod => ({
                                    ...prod,
                                    variants: $ctx.productVariant.filter(
                                      pv => pv.productid === prod.id
                                    )
                                  }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [
                                      {
                                        name: "Fill Murray",
                                        birthYear: 1950,
                                        profilePicture: [
                                          "https://www.fillmurray.com/200/300"
                                        ]
                                      },
                                      {
                                        name: "Place Cage",
                                        birthYear: 1950,
                                        profilePicture: [
                                          "https://www.placecage.com/200/300"
                                        ]
                                      }
                                    ];
                                  }
                                  throw e;
                                }
                              })()}
                              name={"products"}
                            >
                              <DataCtxReader__>
                                {$ctx => (
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__p5XNi
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__jmluv
                                      )}
                                    >
                                      {"Atualizar estoque"}
                                    </div>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__qKgI
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___3D6D5
                                        )}
                                      >
                                        {"Selecionar produto"}
                                      </div>
                                      <Select
                                        data-plasmic-name={"product"}
                                        data-plasmic-override={
                                          overrides.product
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.product
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          ((...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "product",
                                              "value"
                                            ])(eventArgs[0]);
                                          }).apply(null, eventArgs);
                                          (async value => {
                                            const $steps = {};

                                            $steps["updateSelectedProduct"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "selectedProduct"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: $ctx.products.find(
                                                        prod =>
                                                          +prod.id === +value
                                                      )
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateSelectedProduct"] !=
                                                null &&
                                              typeof $steps[
                                                "updateSelectedProduct"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateSelectedProduct"
                                              ].then === "function"
                                            ) {
                                              $steps["updateSelectedProduct"] =
                                                await $steps[
                                                  "updateSelectedProduct"
                                                ];
                                            }

                                            $steps["updateSelectedProduct2"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "selectedVariant"
                                                        ]
                                                      },
                                                      operation: 1
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        undefined
                                                      );
                                                      return undefined;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps[
                                                "updateSelectedProduct2"
                                              ] != null &&
                                              typeof $steps[
                                                "updateSelectedProduct2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateSelectedProduct2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateSelectedProduct2"] =
                                                await $steps[
                                                  "updateSelectedProduct2"
                                                ];
                                            }

                                            $steps["updateSelectedProduct3"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "numberInput",
                                                          "value"
                                                        ]
                                                      },
                                                      operation: 1
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        undefined
                                                      );
                                                      return undefined;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps[
                                                "updateSelectedProduct3"
                                              ] != null &&
                                              typeof $steps[
                                                "updateSelectedProduct3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateSelectedProduct3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateSelectedProduct3"] =
                                                await $steps[
                                                  "updateSelectedProduct3"
                                                ];
                                            }

                                            $steps["updateSelectedProduct4"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "productVariant",
                                                          "value"
                                                        ]
                                                      },
                                                      operation: 1
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        undefined
                                                      );
                                                      return undefined;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps[
                                                "updateSelectedProduct4"
                                              ] != null &&
                                              typeof $steps[
                                                "updateSelectedProduct4"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateSelectedProduct4"
                                              ].then === "function"
                                            ) {
                                              $steps["updateSelectedProduct4"] =
                                                await $steps[
                                                  "updateSelectedProduct4"
                                                ];
                                            }

                                            $steps["updateSelectedProduct5"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "numberInput2",
                                                          "value"
                                                        ]
                                                      },
                                                      operation: 1
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        undefined
                                                      );
                                                      return undefined;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps[
                                                "updateSelectedProduct5"
                                              ] != null &&
                                              typeof $steps[
                                                "updateSelectedProduct5"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateSelectedProduct5"
                                              ].then === "function"
                                            ) {
                                              $steps["updateSelectedProduct5"] =
                                                await $steps[
                                                  "updateSelectedProduct5"
                                                ];
                                            }
                                          }).apply(null, eventArgs);
                                        }}
                                        options={(() => {
                                          try {
                                            return $ctx.products.map(prod => ({
                                              value: prod.id,
                                              label: prod.name
                                            }));
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [
                                                {
                                                  value: "option1",
                                                  label: "Option 1"
                                                },
                                                {
                                                  value: "option2",
                                                  label: "Option 2"
                                                }
                                              ];
                                            }
                                            throw e;
                                          }
                                        })()}
                                        value={generateStateValueProp($state, [
                                          "product",
                                          "value"
                                        ])}
                                      />
                                    </Stack__>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__dRl
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rssJ
                                        )}
                                      >
                                        {"Selecionar op\u00e7\u00e3o"}
                                      </div>
                                      <Select
                                        data-plasmic-name={"productVariant"}
                                        data-plasmic-override={
                                          overrides.productVariant
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.productVariant
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          ((...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "productVariant",
                                              "value"
                                            ])(eventArgs[0]);
                                          }).apply(null, eventArgs);
                                          (async value => {
                                            const $steps = {};

                                            $steps["updateSelectedVariant"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "selectedVariant"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value:
                                                        $state.selectedProduct.variants.find(
                                                          pv =>
                                                            +pv.id === +value
                                                        )
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateSelectedVariant"] !=
                                                null &&
                                              typeof $steps[
                                                "updateSelectedVariant"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateSelectedVariant"
                                              ].then === "function"
                                            ) {
                                              $steps["updateSelectedVariant"] =
                                                await $steps[
                                                  "updateSelectedVariant"
                                                ];
                                            }

                                            $steps["updateNumberInputValue"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "numberInput",
                                                          "value"
                                                        ]
                                                      },
                                                      operation: 1
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        undefined
                                                      );
                                                      return undefined;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps[
                                                "updateNumberInputValue"
                                              ] != null &&
                                              typeof $steps[
                                                "updateNumberInputValue"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateNumberInputValue"
                                              ].then === "function"
                                            ) {
                                              $steps["updateNumberInputValue"] =
                                                await $steps[
                                                  "updateNumberInputValue"
                                                ];
                                            }

                                            $steps["updateNumberInput2Value"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "numberInput2",
                                                          "value"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value:
                                                        $state.selectedVariant
                                                          .price
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps[
                                                "updateNumberInput2Value"
                                              ] != null &&
                                              typeof $steps[
                                                "updateNumberInput2Value"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateNumberInput2Value"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateNumberInput2Value"
                                              ] = await $steps[
                                                "updateNumberInput2Value"
                                              ];
                                            }
                                          }).apply(null, eventArgs);
                                        }}
                                        options={(() => {
                                          try {
                                            return $state.selectedProduct.variants.map(
                                              pv => ({
                                                label: pv.name,
                                                value: pv.id
                                              })
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [
                                                {
                                                  value: "option1",
                                                  label: "Option 1"
                                                },
                                                {
                                                  value: "option2",
                                                  label: "Option 2"
                                                }
                                              ];
                                            }
                                            throw e;
                                          }
                                        })()}
                                        value={generateStateValueProp($state, [
                                          "productVariant",
                                          "value"
                                        ])}
                                      />
                                    </Stack__>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__pjhtS
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___1Cxed
                                        )}
                                      >
                                        {"Estoque"}
                                      </div>
                                      <AntdInputNumber
                                        data-plasmic-name={"numberInput"}
                                        data-plasmic-override={
                                          overrides.numberInput
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.numberInput
                                        )}
                                        onChange={generateStateOnChangeProp(
                                          $state,
                                          ["numberInput", "value"]
                                        )}
                                        type={"number"}
                                        value={generateStateValueProp($state, [
                                          "numberInput",
                                          "value"
                                        ])}
                                      />
                                    </Stack__>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__lptAl
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__uak87
                                        )}
                                      >
                                        {"Pre\u00e7o"}
                                      </div>
                                      <AntdInputNumber
                                        data-plasmic-name={"numberInput2"}
                                        data-plasmic-override={
                                          overrides.numberInput2
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.numberInput2
                                        )}
                                        onChange={generateStateOnChangeProp(
                                          $state,
                                          ["numberInput2", "value"]
                                        )}
                                        type={"number"}
                                        value={generateStateValueProp($state, [
                                          "numberInput2",
                                          "value"
                                        ])}
                                      />
                                    </Stack__>
                                    <Button
                                      data-plasmic-name={"button"}
                                      data-plasmic-override={overrides.button}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["runCode"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return $ctx.supabaseMutation.update(
                                                    {
                                                      table: "productvariant",
                                                      values: {
                                                        stock:
                                                          +$state.numberInput
                                                            .value,
                                                        price:
                                                          +$state.numberInput2
                                                            .value
                                                      },
                                                      key: {
                                                        name: "id",
                                                        value:
                                                          $state.productVariant
                                                            .value
                                                      }
                                                    }
                                                  );
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }

                                        $steps["invokeGlobalAction"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "success",
                                                  "Estoque e pre\u00e7o atualizados"
                                                ]
                                              };
                                              return $globalActions[
                                                "plasmic-antd5-config-provider.showNotification"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["invokeGlobalAction"] !=
                                            null &&
                                          typeof $steps[
                                            "invokeGlobalAction"
                                          ] === "object" &&
                                          typeof $steps["invokeGlobalAction"]
                                            .then === "function"
                                        ) {
                                          $steps["invokeGlobalAction"] =
                                            await $steps["invokeGlobalAction"];
                                        }
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__m1V0Z
                                        )}
                                      >
                                        {"Salvar"}
                                      </div>
                                    </Button>
                                  </Stack__>
                                )}
                              </DataCtxReader__>
                            </DataProvider>
                          )}
                        </DataCtxReader__>
                      </SupabaseFetcher>
                    )}
                  </DataCtxReader__>
                </SupabaseFetcher>
              )}
            </DataCtxReader__>
          </SupabaseMutation>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "supabaseMutation",
    "dataProvider",
    "product",
    "productVariant",
    "numberInput",
    "numberInput2",
    "button"
  ],
  navigationBar: ["navigationBar"],
  supabaseMutation: [
    "supabaseMutation",
    "dataProvider",
    "product",
    "productVariant",
    "numberInput",
    "numberInput2",
    "button"
  ],
  dataProvider: [
    "dataProvider",
    "product",
    "productVariant",
    "numberInput",
    "numberInput2",
    "button"
  ],
  product: ["product"],
  productVariant: ["productVariant"],
  numberInput: ["numberInput"],
  numberInput2: ["numberInput2"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  supabaseMutation: typeof SupabaseMutation;
  dataProvider: typeof DataProvider;
  product: typeof Select;
  productVariant: typeof Select;
  numberInput: typeof AntdInputNumber;
  numberInput2: typeof AntdInputNumber;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardapio__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardapio__VariantsArgs;
    args?: PlasmicCardapio__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardapio__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCardapio__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCardapio__ArgProps,
          internalVariantPropNames: PlasmicCardapio__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCardapio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardapio";
  } else {
    func.displayName = `PlasmicCardapio.${nodeName}`;
  }
  return func;
}

export const PlasmicCardapio = Object.assign(
  // Top-level PlasmicCardapio renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    supabaseMutation: makeNodeComponent("supabaseMutation"),
    dataProvider: makeNodeComponent("dataProvider"),
    product: makeNodeComponent("product"),
    productVariant: makeNodeComponent("productVariant"),
    numberInput: makeNodeComponent("numberInput"),
    numberInput2: makeNodeComponent("numberInput2"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicCardapio
    internalVariantProps: PlasmicCardapio__VariantProps,
    internalArgProps: PlasmicCardapio__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCardapio;
/* prettier-ignore-end */
