// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eVCRKWwcuK6xExRdUZxKpb
// Component: rjwUuA4AwYcB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import { SupabaseFetcher } from "../../supabase/supabase"; // plasmic-import: jGc1XPhYG1oO/codeComponent
import Select from "../../Select"; // plasmic-import: TQ2uLm_LONoV/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: wxD5qjEe3pU/codeComponent
import Button from "../../Button"; // plasmic-import: WaoscXndZ0Zl/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: CBeuHHn1qQBJ/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_cantina.module.css"; // plasmic-import: eVCRKWwcuK6xExRdUZxKpb/projectcss
import sty from "./PlasmicCardapio.module.css"; // plasmic-import: rjwUuA4AwYcB/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: uqgFXbTur-qO/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: LHAURlYRDEN8/icon

createPlasmicElementProxy;

export type PlasmicCardapio__VariantMembers = {};
export type PlasmicCardapio__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardapio__VariantsArgs;
export const PlasmicCardapio__VariantProps = new Array<VariantPropType>();

export type PlasmicCardapio__ArgsType = {};
type ArgPropType = keyof PlasmicCardapio__ArgsType;
export const PlasmicCardapio__ArgProps = new Array<ArgPropType>();

export type PlasmicCardapio__OverridesType = {
  root?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  product?: p.Flex<typeof Select>;
  productVariant?: p.Flex<typeof Select>;
  numberInput?: p.Flex<typeof AntdInputNumber>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultCardapioProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCardapio__RenderFunc(props: {
  variants: PlasmicCardapio__VariantsArgs;
  args: PlasmicCardapio__ArgsType;
  overrides: PlasmicCardapio__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedProduct",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "product[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "productVariant[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "numberInput[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "selectedVariant",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    produtos: usePlasmicDataOp(() => {
      return {
        sourceId: "hLw78H9DAdcctLTB5Q6jny",
        opId: "2be92a5a-ce7c-469c-91c8-89cef81840a8",
        userArgs: {},
        cacheKey: `plasmic.$.2be92a5a-ce7c-469c-91c8-89cef81840a8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <div className={classNames(projectcss.all, sty.freeBox__juhP)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__caHP)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"80px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/cantina/images/logo.png",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eRkux
                  )}
                >
                  {"CANTINA"}
                </div>
              </div>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__oQtOs)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__uavjz
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Novo pedido"}
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__dnNqg
                  )}
                  component={Link}
                  href={`/pedidos`}
                  platform={"nextjs"}
                >
                  {"Ver todos os pedidos"}
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__e43E
                  )}
                  component={Link}
                  href={`/cardapio`}
                  platform={"nextjs"}
                >
                  {"Estoque"}
                </p.PlasmicLink>
              </React.Fragment>
            }
            openButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__oeqTp)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <SupabaseFetcher
            className={classNames("__wab_instance", sty.supabaseFetcher__um2AZ)}
            name={"product"}
            table={"product"}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <SupabaseFetcher
                  className={classNames(
                    "__wab_instance",
                    sty.supabaseFetcher__gk8IK
                  )}
                  name={"productVariant"}
                  table={"productvariant"}
                >
                  <ph.DataCtxReader>
                    {$ctx =>
                      (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return [
                              $ctx.product.map(prod => ({
                                ...prod,
                                variants: $ctx.productVariant.filter(
                                  pv => pv.productid === prod.id
                                )
                              }))
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const products = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__p5XNi
                            )}
                            key={currentIndex}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jmluv
                              )}
                            >
                              {"Atualizar estoque"}
                            </div>
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__qKgI
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3D6D5
                                )}
                              >
                                {"Selecionar produto"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.product
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      p.generateStateOnChangeProp($state, [
                                        "product",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);
                                    (async value => {
                                      const $steps = {};

                                      $steps["updateSelectedProduct"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "selectedProduct"
                                                ]
                                              },
                                              operation: 0,
                                              value:
                                                $queries.produtos.data.find(
                                                  row => row.id === value
                                                )
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              p.set(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        typeof $steps[
                                          "updateSelectedProduct"
                                        ] === "object" &&
                                        typeof $steps["updateSelectedProduct"]
                                          .then === "function"
                                      ) {
                                        $steps["updateSelectedProduct"] =
                                          await $steps["updateSelectedProduct"];
                                      }

                                      $steps["updateSelectedProduct2"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "selectedVariant"
                                                ]
                                              },
                                              operation: 1
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              p.set(
                                                objRoot,
                                                variablePath,
                                                undefined
                                              );
                                              return undefined;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        typeof $steps[
                                          "updateSelectedProduct2"
                                        ] === "object" &&
                                        typeof $steps["updateSelectedProduct2"]
                                          .then === "function"
                                      ) {
                                        $steps["updateSelectedProduct2"] =
                                          await $steps[
                                            "updateSelectedProduct2"
                                          ];
                                      }

                                      $steps["updateSelectedProduct3"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "numberInput",
                                                  "value"
                                                ]
                                              },
                                              operation: 1
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              p.set(
                                                objRoot,
                                                variablePath,
                                                undefined
                                              );
                                              return undefined;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        typeof $steps[
                                          "updateSelectedProduct3"
                                        ] === "object" &&
                                        typeof $steps["updateSelectedProduct3"]
                                          .then === "function"
                                      ) {
                                        $steps["updateSelectedProduct3"] =
                                          await $steps[
                                            "updateSelectedProduct3"
                                          ];
                                      }

                                      $steps["updateSelectedProduct4"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "productVariant",
                                                  "value"
                                                ]
                                              },
                                              operation: 1
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              p.set(
                                                objRoot,
                                                variablePath,
                                                undefined
                                              );
                                              return undefined;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        typeof $steps[
                                          "updateSelectedProduct4"
                                        ] === "object" &&
                                        typeof $steps["updateSelectedProduct4"]
                                          .then === "function"
                                      ) {
                                        $steps["updateSelectedProduct4"] =
                                          await $steps[
                                            "updateSelectedProduct4"
                                          ];
                                      }
                                    }).apply(null, eventArgs);
                                  },
                                  options: (() => {
                                    try {
                                      return products.map(row => ({
                                        label: row.name,
                                        value: row.id
                                      }));
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [
                                          {
                                            value: "option1",
                                            label: "Option 1"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2"
                                          }
                                        ];
                                      }
                                      throw e;
                                    }
                                  })(),
                                  value: p.generateStateValueProp($state, [
                                    "product",
                                    __plasmic_idx_0,
                                    "value"
                                  ])
                                };

                                p.initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "product[].value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <Select
                                    data-plasmic-name={"product"}
                                    data-plasmic-override={overrides.product}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </p.Stack>
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__dRl
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rssJ
                                )}
                              >
                                {"Selecionar op\u00e7\u00e3o"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.productVariant
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      p.generateStateOnChangeProp($state, [
                                        "productVariant",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);
                                    (async value => {
                                      const $steps = {};

                                      $steps["updateSelectedVariant"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "selectedVariant"
                                                ]
                                              },
                                              operation: 0,
                                              value:
                                                $state.selectedProduct.variants.find(
                                                  pv => +pv.id === +value
                                                )
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              p.set(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        typeof $steps[
                                          "updateSelectedVariant"
                                        ] === "object" &&
                                        typeof $steps["updateSelectedVariant"]
                                          .then === "function"
                                      ) {
                                        $steps["updateSelectedVariant"] =
                                          await $steps["updateSelectedVariant"];
                                      }

                                      $steps["updateNumberInputValue"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "numberInput",
                                                  "value"
                                                ]
                                              },
                                              operation: 1
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              p.set(
                                                objRoot,
                                                variablePath,
                                                undefined
                                              );
                                              return undefined;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        typeof $steps[
                                          "updateNumberInputValue"
                                        ] === "object" &&
                                        typeof $steps["updateNumberInputValue"]
                                          .then === "function"
                                      ) {
                                        $steps["updateNumberInputValue"] =
                                          await $steps[
                                            "updateNumberInputValue"
                                          ];
                                      }
                                    }).apply(null, eventArgs);
                                  },
                                  options: (() => {
                                    try {
                                      return $state.selectedProduct.variants.map(
                                        pv => ({
                                          label: pv.name,
                                          value: pv.id
                                        })
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [
                                          {
                                            value: "option1",
                                            label: "Option 1"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2"
                                          }
                                        ];
                                      }
                                      throw e;
                                    }
                                  })(),
                                  value: p.generateStateValueProp($state, [
                                    "productVariant",
                                    __plasmic_idx_0,
                                    "value"
                                  ])
                                };

                                p.initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "productVariant[].value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <Select
                                    data-plasmic-name={"productVariant"}
                                    data-plasmic-override={
                                      overrides.productVariant
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </p.Stack>
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pjhtS
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1Cxed
                                )}
                              >
                                {"Estoque"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.numberInput
                                  ),
                                  onChange: p.generateStateOnChangeProp(
                                    $state,
                                    ["numberInput", __plasmic_idx_0, "value"]
                                  ),
                                  value: p.generateStateValueProp($state, [
                                    "numberInput",
                                    __plasmic_idx_0,
                                    "value"
                                  ])
                                };
                                p.initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "numberInput[].value"
                                    }
                                  ],
                                  [__plasmic_idx_0],
                                  undefined ?? {},
                                  child$Props
                                );
                                p.initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "numberInput[].value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return $state.selectedVariant.stock;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <AntdInputNumber
                                    data-plasmic-name={"numberInput"}
                                    data-plasmic-override={
                                      overrides.numberInput
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </p.Stack>
                            <Button
                              data-plasmic-name={"button"}
                              data-plasmic-override={overrides.button}
                              className={classNames(
                                "__wab_instance",
                                sty.button
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["postgresUpdateById"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "hLw78H9DAdcctLTB5Q6jny",
                                          opId: "4b85247b-e63a-4dc7-b44a-a36084f8867d",
                                          userArgs: {
                                            keys: [$state.selectedVariant.id],
                                            variables: [
                                              $state.numberInput.value
                                            ]
                                          },
                                          cacheKey: `plasmic.$.4b85247b-e63a-4dc7-b44a-a36084f8867d.$.`,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["postgresUpdateById"] ===
                                    "object" &&
                                  typeof $steps["postgresUpdateById"].then ===
                                    "function"
                                ) {
                                  $steps["postgresUpdateById"] = await $steps[
                                    "postgresUpdateById"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bCfPq
                                )}
                              >
                                {"Salvar"}
                              </div>
                            </Button>
                          </p.Stack>
                        );
                      })
                    }
                  </ph.DataCtxReader>
                </SupabaseFetcher>
              )}
            </ph.DataCtxReader>
          </SupabaseFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "product",
    "productVariant",
    "numberInput",
    "button"
  ],
  navigationBar: ["navigationBar"],
  product: ["product"],
  productVariant: ["productVariant"],
  numberInput: ["numberInput"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  product: typeof Select;
  productVariant: typeof Select;
  numberInput: typeof AntdInputNumber;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardapio__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardapio__VariantsArgs;
    args?: PlasmicCardapio__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardapio__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCardapio__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCardapio__ArgProps,
          internalVariantPropNames: PlasmicCardapio__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCardapio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardapio";
  } else {
    func.displayName = `PlasmicCardapio.${nodeName}`;
  }
  return func;
}

export const PlasmicCardapio = Object.assign(
  // Top-level PlasmicCardapio renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    product: makeNodeComponent("product"),
    productVariant: makeNodeComponent("productVariant"),
    numberInput: makeNodeComponent("numberInput"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicCardapio
    internalVariantProps: PlasmicCardapio__VariantProps,
    internalArgProps: PlasmicCardapio__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCardapio;
/* prettier-ignore-end */
