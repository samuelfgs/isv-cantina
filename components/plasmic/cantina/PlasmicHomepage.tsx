// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eVCRKWwcuK6xExRdUZxKpb
// Component: O_2jzEy_JW9Z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: WaoscXndZ0Zl/component
import Tag from "../../Tag"; // plasmic-import: lrm25Wbtct6n/component
import LineItem from "../../LineItem"; // plasmic-import: KBis_g_ud_Oy/component
import Select from "../../Select"; // plasmic-import: TQ2uLm_LONoV/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: wxD5qjEe3pU/codeComponent
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal"; // plasmic-import: xx93QbkHH5i/codeComponent
import { ReactPrint } from "../../../pages/plasmic-host"; // plasmic-import: X8Zc8pbRE2UR/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: CBeuHHn1qQBJ/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_cantina.module.css"; // plasmic-import: eVCRKWwcuK6xExRdUZxKpb/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: O_2jzEy_JW9Z/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: uqgFXbTur-qO/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: LHAURlYRDEN8/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  tag?: p.Flex<typeof Tag>;
  lineItem?: p.Flex<typeof LineItem>;
  formaPagamento?: p.Flex<typeof Select>;
  numberInput?: p.Flex<typeof AntdInputNumber>;
  modal?: p.Flex<typeof AntdModal>;
  copias?: p.Flex<typeof Select>;
  reactPrint?: p.Flex<typeof ReactPrint>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "carrinho",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "selectedItemId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "itemQuantity",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "selectedItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formaPagamento.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "pix"
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "copias.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "2"
      },
      {
        path: "selectedOption",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "orderId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "hLw78H9DAdcctLTB5Q6jny",
        opId: "d9963b22-724e-4029-b61f-8cd45ad5e5aa",
        userArgs: {},
        cacheKey: `plasmic.$.d9963b22-724e-4029-b61f-8cd45ad5e5aa`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ym9HY)}>
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/cantina/images/logo.png",
                fullWidth: 1080,
                fullHeight: 1080,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qiGNf
              )}
            >
              {"CANTINA"}
            </div>
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jmLfs)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eAmoD)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yrHq2
                )}
              >
                {"Carrinho"}
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__o8X)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.carrinho;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fc3De)}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__g1Nj
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___3NMlE
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cDCk
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.qtt;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oP8TH
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return `${currentItem.name} ${
                                    currentItem.option != null
                                      ? `- ${currentItem.option}`
                                      : ""
                                  }`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </p.Stack>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tlGLj
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return `R$ ${(
                                  currentItem.price * currentItem.qtt
                                ).toLocaleString("fr", {
                                  minimumFractionDigits: 2,
                                  maximumFractionDigits: 2
                                })}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__evDgv
                        )}
                        color={"red"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateCarrinho"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["carrinho"]
                                  },
                                  operation: 6,
                                  startIndex: (() => {
                                    try {
                                      return currentIndex;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  deleteCount: 1
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const arr = p.get(objRoot, variablePath);
                                  arr.splice(startIndex, deleteCount);
                                  return arr;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            typeof $steps["updateCarrinho"] === "object" &&
                            typeof $steps["updateCarrinho"].then === "function"
                          ) {
                            $steps["updateCarrinho"] = await $steps[
                              "updateCarrinho"
                            ];
                          }
                        }}
                      >
                        {"X"}
                      </Button>
                    </p.Stack>
                  );
                })}
              </p.Stack>
            </p.Stack>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gfy09)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cxga0
                )}
              >
                {"Items"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__itz8G)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.query.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Tag
                      data-plasmic-name={"tag"}
                      data-plasmic-override={overrides.tag}
                      className={classNames("__wab_instance", sty.tag)}
                      key={currentIndex}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateSelectedItem"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedItemId"]
                                },
                                operation: 0,
                                value: currentItem.id
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                p.set(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateSelectedItem"] === "object" &&
                          typeof $steps["updateSelectedItem"].then ===
                            "function"
                        ) {
                          $steps["updateSelectedItem"] = await $steps[
                            "updateSelectedItem"
                          ];
                        }

                        $steps["updateSelectedItem"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedItem"]
                                },
                                operation: 0,
                                value: currentItem
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                p.set(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateSelectedItem"] === "object" &&
                          typeof $steps["updateSelectedItem"].then ===
                            "function"
                        ) {
                          $steps["updateSelectedItem"] = await $steps[
                            "updateSelectedItem"
                          ];
                        }
                      }}
                      selected={(() => {
                        try {
                          return currentItem.id === $state.selectedItemId;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___42AjX
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Current Item";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Tag>
                  );
                })}
              </div>
              {(() => {
                try {
                  return $state.selectedItemId !== undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qfwRv)}
                >
                  {(() => {
                    try {
                      return $state.selectedItem.variants != null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nHdUj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jkfaG
                        )}
                      >
                        {"Op\u00e7\u00e3o"}
                      </div>
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.query.data.find(
                              row => row.id === $state.selectedItemId
                            ).variants;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fx4Oh
                            )}
                            key={currentIndex}
                          >
                            <LineItem
                              data-plasmic-name={"lineItem"}
                              data-plasmic-override={overrides.lineItem}
                              className={classNames(
                                "__wab_instance",
                                sty.lineItem
                              )}
                              onClick={async () => {
                                const $steps = {};

                                $steps["updateSelectedOption"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectedOption"]
                                        },
                                        operation: 0,
                                        value: currentItem
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        p.set(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["updateSelectedOption"] ===
                                    "object" &&
                                  typeof $steps["updateSelectedOption"].then ===
                                    "function"
                                ) {
                                  $steps["updateSelectedOption"] = await $steps[
                                    "updateSelectedOption"
                                  ];
                                }
                              }}
                              selected={(() => {
                                try {
                                  return (
                                    $state.selectedOption.name ===
                                    currentItem.name
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___3MnjE
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fGc6
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3RiuW
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return `R$ ${(
                                          currentItem.price ??
                                          $state.selectedItem.price
                                        ).toLocaleString("fr", {
                                          maximumFractionDigits: 2,
                                          minimumFractionDigits: 2
                                        })}`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </LineItem>
                          </div>
                        );
                      })}
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qtusc)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5E9Yh
                      )}
                    >
                      {"Quantidade"}
                    </div>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__iwpSe)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___4KMtX
                        )}
                        isDisabled={(() => {
                          try {
                            return $state.itemQuantity === 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateItemQuantity"] =
                            $state.itemQuantity > 0
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["itemQuantity"]
                                    },
                                    operation: 3
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = p.get(
                                      objRoot,
                                      variablePath
                                    );
                                    p.set(objRoot, variablePath, oldValue - 1);
                                    return oldValue - 1;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            typeof $steps["updateItemQuantity"] === "object" &&
                            typeof $steps["updateItemQuantity"].then ===
                              "function"
                          ) {
                            $steps["updateItemQuantity"] = await $steps[
                              "updateItemQuantity"
                            ];
                          }
                        }}
                      >
                        {"-"}
                      </Button>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v0RVs
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.itemQuantity;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__aMcg6
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateItemQuantity"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["itemQuantity"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = p.get(objRoot, variablePath);
                                  p.set(objRoot, variablePath, oldValue + 1);
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            typeof $steps["updateItemQuantity"] === "object" &&
                            typeof $steps["updateItemQuantity"].then ===
                              "function"
                          ) {
                            $steps["updateItemQuantity"] = await $steps[
                              "updateItemQuantity"
                            ];
                          }
                        }}
                      >
                        {"+"}
                      </Button>
                    </p.Stack>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__umgEw)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__u2XgT
                      )}
                      isDisabled={(() => {
                        try {
                          return (
                            $state.itemQuantity === 0 ||
                            ($state.selectedItem.variants != null &&
                              $state.selectedOption == null)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    const item = $queries.query.data.find(
                                      row => row.id === $state.selectedItemId
                                    );
                                    return $state.carrinho.push({
                                      name: item?.name,
                                      id: $state.selectedItemId,
                                      option: $state.selectedOption?.name,
                                      qtt: $state.itemQuantity,
                                      price:
                                        $state.selectedOption?.price ??
                                        $state.selectedItem.price
                                    });
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["updateSelectedOption"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedOption"]
                                },
                                operation: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                p.set(objRoot, variablePath, undefined);
                                return undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateSelectedOption"] === "object" &&
                          typeof $steps["updateSelectedOption"].then ===
                            "function"
                        ) {
                          $steps["updateSelectedOption"] = await $steps[
                            "updateSelectedOption"
                          ];
                        }

                        $steps["updateSelectedItem"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedItemId"]
                                },
                                operation: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                p.set(objRoot, variablePath, undefined);
                                return undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateSelectedItem"] === "object" &&
                          typeof $steps["updateSelectedItem"].then ===
                            "function"
                        ) {
                          $steps["updateSelectedItem"] = await $steps[
                            "updateSelectedItem"
                          ];
                        }

                        $steps["updateItemQuantity"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["itemQuantity"]
                                },
                                operation: 0,
                                value: 0
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                p.set(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateItemQuantity"] === "object" &&
                          typeof $steps["updateItemQuantity"].then ===
                            "function"
                        ) {
                          $steps["updateItemQuantity"] = await $steps[
                            "updateItemQuantity"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qpUQ
                        )}
                      >
                        {"Adicionar"}
                      </div>
                    </Button>
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tvUUx
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `Total: R$ ${$state.carrinho
                    .reduce(
                      (acc, lineItem) => acc + lineItem.price * lineItem.qtt,
                      0
                    )
                    .toLocaleString("fr", {
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2
                    })}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Total: R$ 0,00";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ry6Gk
            )}
          >
            {"Forma de pagamento"}
          </div>
          <Select
            data-plasmic-name={"formaPagamento"}
            data-plasmic-override={overrides.formaPagamento}
            className={classNames("__wab_instance", sty.formaPagamento)}
            onChange={(...eventArgs) => {
              p.generateStateOnChangeProp($state, ["formaPagamento", "value"])(
                eventArgs[0]
              );
            }}
            options={(() => {
              const __composite = [
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null }
              ];
              __composite["0"]["value"] = "cartao";
              __composite["0"]["label"] = "Cartao";
              __composite["1"]["value"] = "pix";
              __composite["1"]["label"] = "Pix";
              __composite["2"]["value"] = "dinheiro";
              __composite["2"]["label"] = "Dinheiro";
              return __composite;
            })()}
            value={p.generateStateValueProp($state, [
              "formaPagamento",
              "value"
            ])}
          />

          {(() => {
            try {
              return $state.formaPagamento.value === "dinheiro";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xw2Tx)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___60W7
                )}
              >
                {"Valor"}
              </div>
              <AntdInputNumber
                data-plasmic-name={"numberInput"}
                data-plasmic-override={overrides.numberInput}
                className={classNames("__wab_instance", sty.numberInput)}
                onChange={p.generateStateOnChangeProp($state, [
                  "numberInput",
                  "value"
                ])}
                value={p.generateStateValueProp($state, [
                  "numberInput",
                  "value"
                ])}
              />
            </p.Stack>
          ) : null}
          <Button
            className={classNames("__wab_instance", sty.button__v5WXs)}
            isDisabled={(() => {
              try {
                return (
                  $state.formaPagamento.value === "dinheiro" &&
                  !$state.numberInput.value
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            onClick={async event => {
              const $steps = {};

              $steps["updateModalOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["modal", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      p.set(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                typeof $steps["updateModalOpen"] === "object" &&
                typeof $steps["updateModalOpen"].then === "function"
              ) {
                $steps["updateModalOpen"] = await $steps["updateModalOpen"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rkMe7
              )}
            >
              {"Finalizar venda"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__xdi3S)}
            onClick={async event => {
              const $steps = {};

              $steps["updateCarrinho"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["carrinho"]
                      },
                      operation: 1
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      p.set(objRoot, variablePath, undefined);
                      return undefined;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                typeof $steps["updateCarrinho"] === "object" &&
                typeof $steps["updateCarrinho"].then === "function"
              ) {
                $steps["updateCarrinho"] = await $steps["updateCarrinho"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6HVto
              )}
            >
              {"Iniciar outra venda"}
            </div>
          </Button>
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens
            )}
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__o0UCr)}>
                <Button
                  className={classNames("__wab_instance", sty.button___28K7H)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["postgresCreate"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "hLw78H9DAdcctLTB5Q6jny",
                              opId: "37475e34-ecd1-40c1-9661-74db57873601",
                              userArgs: {
                                variables: [
                                  {
                                    total: $state.carrinho.reduce(
                                      (acc, lineItem) =>
                                        acc + lineItem.price * lineItem.qtt,
                                      0
                                    ),
                                    lineItems: JSON.stringify($state.carrinho),
                                    method: $state.formaPagamento.value
                                  }
                                ]
                              },
                              cacheKey: `plasmic.$.37475e34-ecd1-40c1-9661-74db57873601`,
                              invalidatedKeys: [],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      typeof $steps["postgresCreate"] === "object" &&
                      typeof $steps["postgresCreate"].then === "function"
                    ) {
                      $steps["postgresCreate"] = await $steps["postgresCreate"];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return ($state.orderId =
                                $steps.postgresCreate.data[0].id);
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (async () => {
                                const sleep = ms =>
                                  new Promise(resolve =>
                                    setTimeout(resolve, ms)
                                  );
                                await sleep(100);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["runActionOnReactPrint"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "reactPrint",
                            action: "printOrder"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      typeof $steps["runActionOnReactPrint"] === "object" &&
                      typeof $steps["runActionOnReactPrint"].then === "function"
                    ) {
                      $steps["runActionOnReactPrint"] = await $steps[
                        "runActionOnReactPrint"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__akubA
                    )}
                  >
                    {"Imprimir"}
                  </div>
                </Button>
                <ReactPrint
                  data-plasmic-name={"reactPrint"}
                  data-plasmic-override={overrides.reactPrint}
                  className={classNames("__wab_instance", sty.reactPrint)}
                  id={(() => {
                    try {
                      return $state.orderId;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  lineItems={$state.carrinho}
                  ref={ref => {
                    $refs["reactPrint"] = ref;
                  }}
                />
              </div>
            }
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={p.generateStateOnChangeProp($state, [
              "modal",
              "open"
            ])}
            open={p.generateStateValueProp($state, ["modal", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__n866S
                )}
              >
                {"Venda"}
              </div>
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox___9CYr)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aP8Qn)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tBgKc)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.carrinho;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__l9ZTb
                        )}
                        key={currentIndex}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1749L
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fnZif
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.qtt;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qtzXp
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return `${currentItem.name} ${
                                    currentItem.option != null
                                      ? `- ${currentItem.option}`
                                      : ""
                                  }`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </p.Stack>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lf73D
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return `R$ ${(
                                  currentItem.price * currentItem.qtt
                                ).toLocaleString("fr", {
                                  minimumFractionDigits: 2,
                                  maximumFractionDigits: 2
                                })}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    );
                  })}
                </p.Stack>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vb9Pd
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return `Total: R$ ${$state.carrinho
                          .reduce(
                            (acc, lineItem) =>
                              acc + lineItem.price * lineItem.qtt,
                            0
                          )
                          .toLocaleString("fr", {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                          })}`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Total: R$ 0,00";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eu48B
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return `Forma de pagamento: ${$state.formaPagamento.value}`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Total: R$ 0,00";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                {(() => {
                  try {
                    return $state.formaPagamento.value === "dinheiro";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vNyBf
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `Troco: R$ ${(
                            $state.numberInput.value -
                            $state.carrinho.reduce(
                              (acc, lineItem) =>
                                acc + lineItem.price * lineItem.qtt,
                              0
                            )
                          ).toLocaleString("fr", {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                          })}`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Total: R$ 0,00";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                ) : null}
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nk451)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wb6Oa
                    )}
                  >
                    {"C\u00f3pias"}
                  </div>
                  <Select
                    data-plasmic-name={"copias"}
                    data-plasmic-override={overrides.copias}
                    className={classNames("__wab_instance", sty.copias)}
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, ["copias", "value"])(
                        eventArgs[0]
                      );
                    }}
                    options={(() => {
                      try {
                        return [...new Array(10).keys()]
                          .map(x => x + 1)
                          .map(x => ({
                            label: `${x}`,
                            value: `${x}`
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            { value: "option1", label: "Option 1" },
                            { value: "option2", label: "Option 2" }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    value={p.generateStateValueProp($state, [
                      "copias",
                      "value"
                    ])}
                  />
                </p.Stack>
              </p.Stack>
            </div>
          </AntdModal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "tag",
    "lineItem",
    "formaPagamento",
    "numberInput",
    "modal",
    "copias",
    "reactPrint"
  ],
  img: ["img"],
  tag: ["tag"],
  lineItem: ["lineItem"],
  formaPagamento: ["formaPagamento"],
  numberInput: ["numberInput"],
  modal: ["modal", "copias", "reactPrint"],
  copias: ["copias"],
  reactPrint: ["reactPrint"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  tag: typeof Tag;
  lineItem: typeof LineItem;
  formaPagamento: typeof Select;
  numberInput: typeof AntdInputNumber;
  modal: typeof AntdModal;
  copias: typeof Select;
  reactPrint: typeof ReactPrint;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    tag: makeNodeComponent("tag"),
    lineItem: makeNodeComponent("lineItem"),
    formaPagamento: makeNodeComponent("formaPagamento"),
    numberInput: makeNodeComponent("numberInput"),
    modal: makeNodeComponent("modal"),
    copias: makeNodeComponent("copias"),
    reactPrint: makeNodeComponent("reactPrint"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
