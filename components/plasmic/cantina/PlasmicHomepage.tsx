// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eVCRKWwcuK6xExRdUZxKpb
// Component: O_2jzEy_JW9Z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Button from "../../Button"; // plasmic-import: WaoscXndZ0Zl/component
import Tag from "../../Tag"; // plasmic-import: lrm25Wbtct6n/component
import LineItem from "../../LineItem"; // plasmic-import: KBis_g_ud_Oy/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponent
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponentHelper
import Select from "../../Select"; // plasmic-import: TQ2uLm_LONoV/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: wxD5qjEe3pU/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: J6Bka2G1vC3V/component
import { ReactPrint } from "../../../pages/plasmic-host"; // plasmic-import: X8Zc8pbRE2UR/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: CBeuHHn1qQBJ/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_cantina.module.css"; // plasmic-import: eVCRKWwcuK6xExRdUZxKpb/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: O_2jzEy_JW9Z/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: uqgFXbTur-qO/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: LHAURlYRDEN8/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 4cDugE6nCYpo/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  tag?: p.Flex<typeof Tag>;
  lineItem?: p.Flex<typeof LineItem>;
  textArea?: p.Flex<typeof AntdTextArea>;
  formaPagamento?: p.Flex<typeof Select>;
  numberInput?: p.Flex<typeof AntdInputNumber>;
  name?: p.Flex<typeof TextInput>;
  reactPrint?: p.Flex<typeof ReactPrint>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = ph.useGlobalActions?.();

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "carrinho",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "selectedItemId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "itemQuantity",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "selectedItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "formaPagamento.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "pix"
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedOption",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "orderId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "name.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isFinished",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "hLw78H9DAdcctLTB5Q6jny",
        opId: "2be92a5a-ce7c-469c-91c8-89cef81840a8",
        userArgs: {},
        cacheKey: `plasmic.$.2be92a5a-ce7c-469c-91c8-89cef81840a8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <div className={classNames(projectcss.all, sty.freeBox___9Y4Ob)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__gjLbd)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"80px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/cantina/images/logo.png",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qiGNf
                  )}
                >
                  {"CANTINA"}
                </div>
              </div>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__kRaSo)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__ua26
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Novo pedido"}
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__zPr63
                  )}
                  component={Link}
                  href={`/pedidos`}
                  platform={"nextjs"}
                >
                  {"Ver todos os pedidos"}
                </p.PlasmicLink>
              </React.Fragment>
            }
            openButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__mtEiT)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jmLfs)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eAmoD)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yrHq2
                )}
              >
                {"Carrinho"}
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__o8X)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.carrinho;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fc3De)}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__g1Nj
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___3NMlE
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cDCk
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.qtt;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oP8TH
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return `${currentItem.name}${
                                    !currentItem.isSingle
                                      ? ` - ${currentItem.option.name}`
                                      : ""
                                  }`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </p.Stack>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tlGLj
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return `R$ ${(
                                  currentItem.price * currentItem.qtt
                                ).toLocaleString("fr", {
                                  minimumFractionDigits: 2,
                                  maximumFractionDigits: 2
                                })}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__evDgv
                        )}
                        color={"red"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateCarrinho"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["carrinho"]
                                  },
                                  operation: 6,
                                  startIndex: (() => {
                                    try {
                                      return currentIndex;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  deleteCount: 1
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const arr = p.get(objRoot, variablePath);
                                  arr.splice(startIndex, deleteCount);
                                  return arr;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            typeof $steps["updateCarrinho"] === "object" &&
                            typeof $steps["updateCarrinho"].then === "function"
                          ) {
                            $steps["updateCarrinho"] = await $steps[
                              "updateCarrinho"
                            ];
                          }
                        }}
                      >
                        {"X"}
                      </Button>
                    </p.Stack>
                  );
                })}
              </p.Stack>
            </p.Stack>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gfy09)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cxga0
                )}
              >
                {"Items"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__itz8G)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.query.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Tag
                      data-plasmic-name={"tag"}
                      data-plasmic-override={overrides.tag}
                      className={classNames("__wab_instance", sty.tag)}
                      key={currentIndex}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateSelectedItemId"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedItemId"]
                                },
                                operation: 0,
                                value: currentItem.id
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                p.set(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateSelectedItemId"] === "object" &&
                          typeof $steps["updateSelectedItemId"].then ===
                            "function"
                        ) {
                          $steps["updateSelectedItemId"] = await $steps[
                            "updateSelectedItemId"
                          ];
                        }

                        $steps["updateSelectedItem"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedItem"]
                                },
                                operation: 0,
                                value: currentItem
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                p.set(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateSelectedItem"] === "object" &&
                          typeof $steps["updateSelectedItem"].then ===
                            "function"
                        ) {
                          $steps["updateSelectedItem"] = await $steps[
                            "updateSelectedItem"
                          ];
                        }

                        $steps["updateSelectedOption"] =
                          currentItem.variants.length === 1
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["selectedOption"]
                                  },
                                  operation: 0,
                                  value: currentItem.variants[0]
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  p.set(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          typeof $steps["updateSelectedOption"] === "object" &&
                          typeof $steps["updateSelectedOption"].then ===
                            "function"
                        ) {
                          $steps["updateSelectedOption"] = await $steps[
                            "updateSelectedOption"
                          ];
                        }
                      }}
                      selected={(() => {
                        try {
                          return currentItem.id === $state.selectedItemId;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___42AjX
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Current Item";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Tag>
                  );
                })}
              </div>
              {(() => {
                try {
                  return $state.selectedItemId !== undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qfwRv)}
                >
                  {(() => {
                    try {
                      return $state.selectedItem.variants != null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nHdUj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jkfaG
                        )}
                      >
                        {"Op\u00e7\u00e3o"}
                      </div>
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.query.data.find(
                              row => row.id === $state.selectedItemId
                            ).variants;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fx4Oh
                            )}
                            key={currentIndex}
                          >
                            <LineItem
                              data-plasmic-name={"lineItem"}
                              data-plasmic-override={overrides.lineItem}
                              className={classNames(
                                "__wab_instance",
                                sty.lineItem
                              )}
                              onClick={async () => {
                                const $steps = {};

                                $steps["updateSelectedOption"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectedOption"]
                                        },
                                        operation: 0,
                                        value: currentItem
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        p.set(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["updateSelectedOption"] ===
                                    "object" &&
                                  typeof $steps["updateSelectedOption"].then ===
                                    "function"
                                ) {
                                  $steps["updateSelectedOption"] = await $steps[
                                    "updateSelectedOption"
                                  ];
                                }
                              }}
                              selected={(() => {
                                try {
                                  return (
                                    $state.selectedOption.id === currentItem.id
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___3MnjE
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fGc6
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3RiuW
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return `R$ ${(
                                          currentItem.price ??
                                          $state.selectedItem.price
                                        ).toLocaleString("fr", {
                                          maximumFractionDigits: 2,
                                          minimumFractionDigits: 2
                                        })}`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </LineItem>
                          </div>
                        );
                      })}
                    </div>
                  ) : null}
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qLfSn)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0AFmf
                      )}
                    >
                      {"Observa\u00e7\u00e3o"}
                    </div>
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.textArea),
                        onChange: p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["textArea", "value"],
                          AntdTextArea_Helpers
                        ),
                        value: p.generateStateValueProp($state, [
                          "textArea",
                          "value"
                        ])
                      };
                      p.initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "textArea.value"
                          }
                        ],
                        [],
                        AntdTextArea_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdTextArea
                          data-plasmic-name={"textArea"}
                          data-plasmic-override={overrides.textArea}
                          {...child$Props}
                        />
                      );
                    })()}
                  </p.Stack>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qtusc)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s0Qww
                      )}
                    >
                      {"Quantidade"}
                    </div>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__iwpSe)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___4KMtX
                        )}
                        isDisabled={(() => {
                          try {
                            return $state.itemQuantity === 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateItemQuantity"] =
                            $state.itemQuantity > 0
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["itemQuantity"]
                                    },
                                    operation: 3
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = p.get(
                                      objRoot,
                                      variablePath
                                    );
                                    p.set(objRoot, variablePath, oldValue - 1);
                                    return oldValue - 1;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            typeof $steps["updateItemQuantity"] === "object" &&
                            typeof $steps["updateItemQuantity"].then ===
                              "function"
                          ) {
                            $steps["updateItemQuantity"] = await $steps[
                              "updateItemQuantity"
                            ];
                          }
                        }}
                      >
                        {"-"}
                      </Button>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v0RVs
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.itemQuantity;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__aMcg6
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateItemQuantity"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["itemQuantity"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = p.get(objRoot, variablePath);
                                  p.set(objRoot, variablePath, oldValue + 1);
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            typeof $steps["updateItemQuantity"] === "object" &&
                            typeof $steps["updateItemQuantity"].then ===
                              "function"
                          ) {
                            $steps["updateItemQuantity"] = await $steps[
                              "updateItemQuantity"
                            ];
                          }
                        }}
                      >
                        {"+"}
                      </Button>
                    </p.Stack>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5E9Yh
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `Estoque: ${$state.selectedOption.stock}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Estoque: ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__umgEw)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__u2XgT
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.selectedItemId = undefined;
                                    $state.selectedItem = undefined;
                                    $state.selectedOption = undefined;
                                    $state.itemQuantity = 1;
                                    return ($state.textArea.value = undefined);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qpUQ
                        )}
                      >
                        {"Cancelar"}
                      </div>
                    </Button>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__wzsiq
                      )}
                      isDisabled={(() => {
                        try {
                          return (
                            $state.itemQuantity === 0 ||
                            ($state.selectedItem.variants != null &&
                              $state.selectedOption == null)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["showNotification"] =
                          $state.selectedOption.stock < $state.itemQuantity
                            ? (() => {
                                const actionArgs = {
                                  type: "error",
                                  message: "Estoque indispon\u00edvel",
                                  description: `Estoque atual: ${$state.selectedOption.stock}`
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          typeof $steps["showNotification"] === "object" &&
                          typeof $steps["showNotification"].then === "function"
                        ) {
                          $steps["showNotification"] = await $steps[
                            "showNotification"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    if (
                                      $state.selectedOption.stock <
                                      $state.itemQuantity
                                    ) {
                                      return;
                                    }
                                    const item = $queries.query.data.find(
                                      row => row.id === $state.selectedItemId
                                    );
                                    $state.carrinho.push({
                                      name: item?.name,
                                      id: $state.selectedItemId,
                                      option: $state.selectedOption,
                                      qtt: $state.itemQuantity,
                                      price:
                                        $state.selectedOption?.price ??
                                        $state.selectedItem.price,
                                      description: $state.textArea.value,
                                      isSingle:
                                        $state.selectedItem.variants.length ===
                                        1
                                    });
                                    $state.selectedItem = undefined;
                                    $state.selectedItemId = undefined;
                                    $state.selectedOption = undefined;
                                    $state.itemQuantity = 1;
                                    return ($state.textArea.value = undefined);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vk60H
                        )}
                      >
                        {"Adicionar"}
                      </div>
                    </Button>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tSxfn)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tvUUx
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `Total: R$ ${$state.carrinho
                      .reduce(
                        (acc, lineItem) => acc + lineItem.price * lineItem.qtt,
                        0
                      )
                      .toLocaleString("fr", {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                      })}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Total: R$ 0,00";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pn8M1)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ry6Gk
                )}
              >
                {"Forma de pagamento"}
              </div>
              <Select
                data-plasmic-name={"formaPagamento"}
                data-plasmic-override={overrides.formaPagamento}
                className={classNames("__wab_instance", sty.formaPagamento)}
                onChange={(...eventArgs) => {
                  p.generateStateOnChangeProp($state, [
                    "formaPagamento",
                    "value"
                  ])(eventArgs[0]);
                }}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null },
                    { value: null, label: null }
                  ];
                  __composite["0"]["value"] = "cartao";
                  __composite["0"]["label"] = "Cartao";
                  __composite["1"]["value"] = "pix";
                  __composite["1"]["label"] = "Pix";
                  __composite["2"]["value"] = "dinheiro";
                  __composite["2"]["label"] = "Dinheiro";
                  return __composite;
                })()}
                value={p.generateStateValueProp($state, [
                  "formaPagamento",
                  "value"
                ])}
              />
            </p.Stack>
            {(() => {
              try {
                return $state.formaPagamento.value === "dinheiro";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xw2Tx)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___60W7
                  )}
                >
                  {"A receber"}
                </div>
                <AntdInputNumber
                  data-plasmic-name={"numberInput"}
                  data-plasmic-override={overrides.numberInput}
                  className={classNames("__wab_instance", sty.numberInput)}
                  onChange={p.generateStateOnChangeProp($state, [
                    "numberInput",
                    "value"
                  ])}
                  value={p.generateStateValueProp($state, [
                    "numberInput",
                    "value"
                  ])}
                />
              </p.Stack>
            ) : null}
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__g21AQ)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cen7J
                )}
              >
                {"Nome"}
              </div>
              <TextInput
                data-plasmic-name={"name"}
                data-plasmic-override={overrides.name}
                className={classNames("__wab_instance", sty.name)}
                onChange={(...eventArgs) => {
                  p.generateStateOnChangeProp($state, ["name", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={" "}
                value={
                  p.generateStateValueProp($state, ["name", "value"]) ?? ""
                }
              />
            </p.Stack>
            <Button
              className={classNames("__wab_instance", sty.button__v5WXs)}
              isDisabled={(() => {
                try {
                  return (
                    $state.selectedItem != null ||
                    $state.isFinished ||
                    ($state.formaPagamento.value === "dinheiro" &&
                      !$state.numberInput.value)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsFinished"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isFinished"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = p.get(objRoot, variablePath);
                        p.set(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps["updateIsFinished"] === "object" &&
                  typeof $steps["updateIsFinished"].then === "function"
                ) {
                  $steps["updateIsFinished"] = await $steps["updateIsFinished"];
                }

                $steps["postgresCreate"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "hLw78H9DAdcctLTB5Q6jny",
                          opId: "37475e34-ecd1-40c1-9661-74db57873601",
                          userArgs: {
                            variables: [
                              {
                                name: $state.name.value,
                                total: $state.carrinho.reduce(
                                  (acc, lineItem) =>
                                    acc + lineItem.price * lineItem.qtt,
                                  0
                                ),
                                lineItems: JSON.stringify($state.carrinho),
                                method: $state.formaPagamento.value
                              }
                            ]
                          },
                          cacheKey: `plasmic.$.37475e34-ecd1-40c1-9661-74db57873601.$.`,
                          invalidatedKeys: [],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps["postgresCreate"] === "object" &&
                  typeof $steps["postgresCreate"].then === "function"
                ) {
                  $steps["postgresCreate"] = await $steps["postgresCreate"];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.orderId =
                            $steps.postgresCreate.data[0].id);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["runCode2"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (async () => {
                            const sleep = ms =>
                              new Promise(resolve => setTimeout(resolve, ms));
                            await sleep(100);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }

                $steps["runActionOnReactPrint"] = true
                  ? (() => {
                      const actionArgs = {
                        tplRef: "reactPrint",
                        action: "printOrder"
                      };
                      return (({ tplRef, action, args }) => {
                        return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps["runActionOnReactPrint"] === "object" &&
                  typeof $steps["runActionOnReactPrint"].then === "function"
                ) {
                  $steps["runActionOnReactPrint"] = await $steps[
                    "runActionOnReactPrint"
                  ];
                }

                $steps["useIntegration"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "hLw78H9DAdcctLTB5Q6jny",
                          opId: "4b85247b-e63a-4dc7-b44a-a36084f8867d",
                          userArgs: {
                            keys: [$state.carrinho[0].id],
                            variables: [
                              (() => {
                                const lineItem = $state.carrinho[0];
                                const product = $queries.query.data.find(
                                  row => row.id === lineItem.id
                                );
                                const productVariant = product.variants.find(
                                  v => v.id === lineItem.option.id
                                );
                                return productVariant.stock - lineItem.qtt;
                              })()
                            ]
                          },
                          cacheKey: `plasmic.$.4b85247b-e63a-4dc7-b44a-a36084f8867d.$.`,
                          invalidatedKeys: [],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps["useIntegration"] === "object" &&
                  typeof $steps["useIntegration"].then === "function"
                ) {
                  $steps["useIntegration"] = await $steps["useIntegration"];
                }

                $steps["refreshData"] = true
                  ? (() => {
                      const actionArgs = {
                        queryInvalidation: ["plasmic_refresh_all"]
                      };
                      return (async ({ queryInvalidation }) => {
                        if (!queryInvalidation) {
                          return;
                        }
                        await plasmicInvalidate(queryInvalidation);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps["refreshData"] === "object" &&
                  typeof $steps["refreshData"].then === "function"
                ) {
                  $steps["refreshData"] = await $steps["refreshData"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rkMe7
                )}
              >
                {"Finalizar venda"}
              </div>
            </Button>
            {(() => {
              try {
                return $state.isFinished;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                className={classNames("__wab_instance", sty.button__qzsde)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runActionOnReactPrint"] = true
                    ? (() => {
                        const actionArgs = {
                          tplRef: "reactPrint",
                          action: "printOrder"
                        };
                        return (({ tplRef, action, args }) => {
                          return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    typeof $steps["runActionOnReactPrint"] === "object" &&
                    typeof $steps["runActionOnReactPrint"].then === "function"
                  ) {
                    $steps["runActionOnReactPrint"] = await $steps[
                      "runActionOnReactPrint"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fjXrh
                  )}
                >
                  {"Imprimir novamente"}
                </div>
              </Button>
            ) : null}
            <Button
              className={classNames("__wab_instance", sty.button__xdi3S)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return window.location.reload();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6HVto
                )}
              >
                {"Iniciar outra venda"}
              </div>
            </Button>
          </p.Stack>
          <ReactPrint
            data-plasmic-name={"reactPrint"}
            data-plasmic-override={overrides.reactPrint}
            className={classNames("__wab_instance", sty.reactPrint)}
            id={(() => {
              try {
                return $state.orderId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            lineItems={$state.carrinho}
            ref={ref => {
              $refs["reactPrint"] = ref;
            }}
          />

          {(() => {
            try {
              return (
                $state.isFinished && $state.formaPagamento.value === "dinheiro"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tgCne
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `Troco: R$ ${(
                      $state.numberInput.value -
                      $state.carrinho.reduce(
                        (acc, lineItem) => acc + lineItem.price * lineItem.qtt,
                        0
                      )
                    ).toLocaleString("fr", {
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2
                    })}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Troco";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "tag",
    "lineItem",
    "textArea",
    "formaPagamento",
    "numberInput",
    "name",
    "reactPrint"
  ],
  navigationBar: ["navigationBar"],
  tag: ["tag"],
  lineItem: ["lineItem"],
  textArea: ["textArea"],
  formaPagamento: ["formaPagamento"],
  numberInput: ["numberInput"],
  name: ["name"],
  reactPrint: ["reactPrint"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  tag: typeof Tag;
  lineItem: typeof LineItem;
  textArea: typeof AntdTextArea;
  formaPagamento: typeof Select;
  numberInput: typeof AntdInputNumber;
  name: typeof TextInput;
  reactPrint: typeof ReactPrint;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    tag: makeNodeComponent("tag"),
    lineItem: makeNodeComponent("lineItem"),
    textArea: makeNodeComponent("textArea"),
    formaPagamento: makeNodeComponent("formaPagamento"),
    numberInput: makeNodeComponent("numberInput"),
    _name: makeNodeComponent("name"),
    reactPrint: makeNodeComponent("reactPrint"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
