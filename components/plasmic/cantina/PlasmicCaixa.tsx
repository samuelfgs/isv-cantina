// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eVCRKWwcuK6xExRdUZxKpb
// Component: YdlhJVWan4Kd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { ReactPrint } from "../../../pages/plasmic-host"; // plasmic-import: X8Zc8pbRE2UR/codeComponent
import { SupabaseFetcher } from "../../supabase/supabase"; // plasmic-import: jGc1XPhYG1oO/codeComponent
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_cantina.module.css"; // plasmic-import: eVCRKWwcuK6xExRdUZxKpb/projectcss
import sty from "./PlasmicCaixa.module.css"; // plasmic-import: YdlhJVWan4Kd/css

createPlasmicElementProxy;

export type PlasmicCaixa__VariantMembers = {};
export type PlasmicCaixa__VariantsArgs = {};
type VariantPropType = keyof PlasmicCaixa__VariantsArgs;
export const PlasmicCaixa__VariantProps = new Array<VariantPropType>();

export type PlasmicCaixa__ArgsType = {};
type ArgPropType = keyof PlasmicCaixa__ArgsType;
export const PlasmicCaixa__ArgProps = new Array<ArgPropType>();

export type PlasmicCaixa__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  reactPrint?: Flex__<typeof ReactPrint>;
  dataProvider?: Flex__<typeof DataProvider>;
};

export interface DefaultCaixaProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCaixa__RenderFunc(props: {
  variants: PlasmicCaixa__VariantsArgs;
  args: PlasmicCaixa__ArgsType;
  overrides: PlasmicCaixa__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedLineItems",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "selectedOrderId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    vendas: usePlasmicDataOp(() => {
      return {
        sourceId: "hLw78H9DAdcctLTB5Q6jny",
        opId: "941e3615-8b19-4ad1-b50a-55a84ebff58f",
        userArgs: {},
        cacheKey: `plasmic.$.941e3615-8b19-4ad1-b50a-55a84ebff58f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <div className={classNames(projectcss.all, sty.freeBox__l0Od9)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__kIiqR)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"80px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/cantina/images/logo.png",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ojaGh
                  )}
                >
                  {"CANTINA"}
                </div>
              </div>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__jCnb6)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <React.Fragment>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__gDHV
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Novo pedido"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___9VUfz
                  )}
                  component={Link}
                  href={`/pedidos`}
                  platform={"nextjs"}
                >
                  {"Ver todos os pedidos"}
                </PlasmicLink__>
              </React.Fragment>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__z2HNf)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <ReactPrint
            data-plasmic-name={"reactPrint"}
            data-plasmic-override={overrides.reactPrint}
            className={classNames("__wab_instance", sty.reactPrint)}
            id={(() => {
              try {
                return $state.selectedOrderId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            lineItems={$state.selectedLineItems}
            ref={ref => {
              $refs["reactPrint"] = ref;
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox__lxl6Q)}>
            <SupabaseFetcher
              className={classNames(
                "__wab_instance",
                sty.supabaseFetcher__p87IG
              )}
              name={"product"}
              table={"product"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <SupabaseFetcher
                    className={classNames(
                      "__wab_instance",
                      sty.supabaseFetcher__eLNcQ
                    )}
                    name={"productVariant"}
                    table={"productvariant"}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <DataProvider
                          data-plasmic-name={"dataProvider"}
                          data-plasmic-override={overrides.dataProvider}
                          className={classNames(
                            "__wab_instance",
                            sty.dataProvider
                          )}
                          data={(() => {
                            try {
                              return $ctx.product.map(prod => ({
                                ...prod,
                                variants: $ctx.productVariant.filter(
                                  pv => pv.productid === prod.id
                                )
                              }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [
                                  {
                                    name: "Fill Murray",
                                    birthYear: 1950,
                                    profilePicture: [
                                      "https://www.fillmurray.com/200/300"
                                    ]
                                  },
                                  {
                                    name: "Place Cage",
                                    birthYear: 1950,
                                    profilePicture: [
                                      "https://www.placecage.com/200/300"
                                    ]
                                  }
                                ];
                              }
                              throw e;
                            }
                          })()}
                          name={"products"}
                        >
                          <DataCtxReader__>
                            {$ctx => (
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__glw2K
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return `Total: R$ ${$queries.vendas.data
                                          .reduce(
                                            (acc, venda) =>
                                              acc +
                                              venda.lineItems.reduce(
                                                (acc2, lineItem) =>
                                                  acc2 +
                                                  lineItem.qtt * lineItem.price,
                                                0
                                              ),
                                            0
                                          )
                                          .toLocaleString("fr", {
                                            maximumFractionDigits: 2,
                                            minimumFractionDigits: 2
                                          })}`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Total: ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__wXSyu
                                  )}
                                >
                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $ctx.products.flatMap(prod =>
                                          prod.variants.flatMap(pv => ({
                                            ...prod,
                                            variant: { ...pv }
                                          }))
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__yoI9
                                        )}
                                        key={currentIndex}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__l75Yn
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.name;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__fDikb
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.variant.name;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___3E6Nr
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return `Vendas: ${$queries.vendas.data.reduce(
                                                  (acc, venda) => {
                                                    let total = acc;
                                                    for (const lineItem of venda.lineItems) {
                                                      if (
                                                        lineItem.option.id ===
                                                        currentItem.variant.id
                                                      ) {
                                                        total += lineItem.qtt;
                                                      }
                                                    }
                                                    return total;
                                                  },
                                                  0
                                                )}`;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Vendas: ";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__eWRgA
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return `Total: R$ ${$queries.vendas.data
                                                  .reduce((acc, venda) => {
                                                    let total = acc;
                                                    for (const lineItem of venda.lineItems) {
                                                      if (
                                                        lineItem.option.id ===
                                                        currentItem.variant.id
                                                      ) {
                                                        total +=
                                                          lineItem.qtt *
                                                          lineItem.price;
                                                      }
                                                    }
                                                    return total;
                                                  }, 0)
                                                  .toLocaleString("fr", {
                                                    minimumFractionDigits: 2,
                                                    maximumFractionDigits: 2
                                                  })}`;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Vendas: ";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    );
                                  })}
                                </div>
                              </React.Fragment>
                            )}
                          </DataCtxReader__>
                        </DataProvider>
                      )}
                    </DataCtxReader__>
                  </SupabaseFetcher>
                )}
              </DataCtxReader__>
            </SupabaseFetcher>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "reactPrint", "dataProvider"],
  navigationBar: ["navigationBar"],
  reactPrint: ["reactPrint"],
  dataProvider: ["dataProvider"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  reactPrint: typeof ReactPrint;
  dataProvider: typeof DataProvider;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCaixa__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCaixa__VariantsArgs;
    args?: PlasmicCaixa__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCaixa__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCaixa__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCaixa__ArgProps,
          internalVariantPropNames: PlasmicCaixa__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCaixa__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCaixa";
  } else {
    func.displayName = `PlasmicCaixa.${nodeName}`;
  }
  return func;
}

export const PlasmicCaixa = Object.assign(
  // Top-level PlasmicCaixa renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    reactPrint: makeNodeComponent("reactPrint"),
    dataProvider: makeNodeComponent("dataProvider"),

    // Metadata about props expected for PlasmicCaixa
    internalVariantProps: PlasmicCaixa__VariantProps,
    internalArgProps: PlasmicCaixa__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCaixa;
/* prettier-ignore-end */
