// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eVCRKWwcuK6xExRdUZxKpb
// Component: ZNds0ptme1kZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { SupabaseMutation } from "../../supabase/supabase"; // plasmic-import: RAfjAj2dBb8c/codeComponent
import { SupabaseFetcher } from "../../supabase/supabase"; // plasmic-import: jGc1XPhYG1oO/codeComponent
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import Button from "../../Button"; // plasmic-import: WaoscXndZ0Zl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_cantina.module.css"; // plasmic-import: eVCRKWwcuK6xExRdUZxKpb/projectcss
import sty from "./PlasmicAdmin.module.css"; // plasmic-import: ZNds0ptme1kZ/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: uqgFXbTur-qO/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: LHAURlYRDEN8/icon

createPlasmicElementProxy;

export type PlasmicAdmin__VariantMembers = {};
export type PlasmicAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdmin__VariantsArgs;
export const PlasmicAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicAdmin__ArgsType = {};
type ArgPropType = keyof PlasmicAdmin__ArgsType;
export const PlasmicAdmin__ArgProps = new Array<ArgPropType>();

export type PlasmicAdmin__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  supabaseMutation?: Flex__<typeof SupabaseMutation>;
  supabaseFetcher?: Flex__<typeof SupabaseFetcher>;
  tabs?: Flex__<typeof AntdTabs>;
};

export interface DefaultAdminProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdmin__RenderFunc(props: {
  variants: PlasmicAdmin__VariantsArgs;
  args: PlasmicAdmin__ArgsType;
  overrides: PlasmicAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <div className={classNames(projectcss.all, sty.freeBox__ilyy9)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__heavw)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"80px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/cantina/images/logo.png",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__faUe
                  )}
                >
                  {"CANTINA"}
                </div>
              </div>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__fxhAc)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <React.Fragment>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___9WDcN
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Novo pedido"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__dbuXh
                  )}
                  component={Link}
                  href={`/pedidos`}
                  platform={"nextjs"}
                >
                  {"Ver todos os pedidos"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__tlYtO
                  )}
                  component={Link}
                  href={`/cardapio`}
                  platform={"nextjs"}
                >
                  {"Estoque"}
                </PlasmicLink__>
              </React.Fragment>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__iVzil)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <SupabaseMutation
            data-plasmic-name={"supabaseMutation"}
            data-plasmic-override={overrides.supabaseMutation}
            className={classNames("__wab_instance", sty.supabaseMutation)}
          >
            <DataCtxReader__>
              {$ctx => (
                <SupabaseFetcher
                  data-plasmic-name={"supabaseFetcher"}
                  data-plasmic-override={overrides.supabaseFetcher}
                  className={classNames("__wab_instance", sty.supabaseFetcher)}
                  name={"vendas"}
                  table={"vendas"}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <AntdTabs
                        data-plasmic-name={"tabs"}
                        data-plasmic-override={overrides.tabs}
                        activeKey={generateStateValueProp($state, [
                          "tabs",
                          "activeKey"
                        ])}
                        animateTabBar={true}
                        animateTabContent={false}
                        animated={true}
                        className={classNames("__wab_instance", sty.tabs)}
                        items={
                          <React.Fragment>
                            <AntdTabItem
                              className={classNames(
                                "__wab_instance",
                                sty.tabItem__lRa0V
                              )}
                              key={"preparando"}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lsGqU
                                  )}
                                >
                                  {"PREPARANDO"}
                                </div>
                              }
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__iltgf
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $ctx.vendas
                                        .filter(
                                          row => row.status === "preparando"
                                        )
                                        .sort((a, b) => b.id - a.id);
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__jR11H
                                      )}
                                      key={currentIndex}
                                    >
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__kLcj0
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___97Dst
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__vt4Vs
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.name;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__wb7Ju
                                          )}
                                        >
                                          <React.Fragment>
                                            <React.Fragment>
                                              {""}
                                            </React.Fragment>
                                            {
                                              <ul
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.ul,
                                                  sty.ul__vCya0
                                                )}
                                              >
                                                {(_par =>
                                                  !_par
                                                    ? []
                                                    : Array.isArray(_par)
                                                    ? _par
                                                    : [_par])(
                                                  (() => {
                                                    try {
                                                      return currentItem.lineItems;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ).map(
                                                  (
                                                    __plasmic_item_1,
                                                    __plasmic_idx_1
                                                  ) => {
                                                    const lineItem =
                                                      __plasmic_item_1;
                                                    const currentIndex =
                                                      __plasmic_idx_1;
                                                    return (
                                                      <li
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.li,
                                                          projectcss.__wab_text,
                                                          sty.li__zjxog
                                                        )}
                                                        key={currentIndex}
                                                      >
                                                        <React.Fragment>
                                                          {(() => {
                                                            try {
                                                              return `${
                                                                lineItem.qtt
                                                              }x  ${
                                                                lineItem.name
                                                              }${
                                                                !lineItem.isSingle
                                                                  ? ` - ${lineItem.option.name}`
                                                                  : ""
                                                              }`;
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return "";
                                                              }
                                                              throw e;
                                                            }
                                                          })()}
                                                        </React.Fragment>
                                                      </li>
                                                    );
                                                  }
                                                )}
                                              </ul>
                                            }
                                            <React.Fragment>
                                              {""}
                                            </React.Fragment>
                                          </React.Fragment>
                                        </div>
                                      </Stack__>
                                      <Button
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__zq1N6
                                        )}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return $ctx.supabaseMutation.upsert(
                                                      {
                                                        table: "vendas",
                                                        upsertValues: [
                                                          {
                                                            id: currentItem.id,
                                                            status: "pronto"
                                                          }
                                                        ]
                                                      }
                                                    );
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }

                                          $steps["refreshData"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  queryInvalidation: [
                                                    "plasmic_refresh_all"
                                                  ]
                                                };
                                                return (async ({
                                                  queryInvalidation
                                                }) => {
                                                  if (!queryInvalidation) {
                                                    return;
                                                  }
                                                  await plasmicInvalidate(
                                                    queryInvalidation
                                                  );
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["refreshData"] != null &&
                                            typeof $steps["refreshData"] ===
                                              "object" &&
                                            typeof $steps["refreshData"]
                                              .then === "function"
                                          ) {
                                            $steps["refreshData"] =
                                              await $steps["refreshData"];
                                          }

                                          $steps["invokeGlobalAction"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "success",
                                                    (() => {
                                                      try {
                                                        return `Pedido ${currentItem.id} movido para pronto`;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                      >
                                        {"PRONTO"}
                                      </Button>
                                    </Stack__>
                                  );
                                })}
                              </div>
                            </AntdTabItem>
                            <AntdTabItem
                              className={classNames(
                                "__wab_instance",
                                sty.tabItem__znL1Z
                              )}
                              key={"pronto"}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___9WYr3
                                  )}
                                >
                                  {"PRONTO"}
                                </div>
                              }
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__v7R5
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $ctx.vendas
                                        .filter(row => row.status === "pronto")
                                        .sort((a, b) => b.id - a.id);
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__x2Toe
                                      )}
                                      key={currentIndex}
                                    >
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__tqJpE
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___0Cl2W
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__uYoB3
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.name;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___8Bz6
                                          )}
                                        >
                                          <React.Fragment>
                                            <React.Fragment>
                                              {""}
                                            </React.Fragment>
                                            {
                                              <ul
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.ul,
                                                  sty.ul__v2GA
                                                )}
                                              >
                                                {(_par =>
                                                  !_par
                                                    ? []
                                                    : Array.isArray(_par)
                                                    ? _par
                                                    : [_par])(
                                                  (() => {
                                                    try {
                                                      return currentItem.lineItems;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ).map(
                                                  (
                                                    __plasmic_item_1,
                                                    __plasmic_idx_1
                                                  ) => {
                                                    const lineItem =
                                                      __plasmic_item_1;
                                                    const currentIndex =
                                                      __plasmic_idx_1;
                                                    return (
                                                      <li
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.li,
                                                          projectcss.__wab_text,
                                                          sty.li___8W5J7
                                                        )}
                                                        key={currentIndex}
                                                      >
                                                        <React.Fragment>
                                                          {(() => {
                                                            try {
                                                              return `${
                                                                lineItem.qtt
                                                              }x  ${
                                                                lineItem.name
                                                              }${
                                                                !lineItem.isSingle
                                                                  ? ` - ${lineItem.option.name}`
                                                                  : ""
                                                              }`;
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return "";
                                                              }
                                                              throw e;
                                                            }
                                                          })()}
                                                        </React.Fragment>
                                                      </li>
                                                    );
                                                  }
                                                )}
                                              </ul>
                                            }
                                            <React.Fragment>
                                              {""}
                                            </React.Fragment>
                                          </React.Fragment>
                                        </div>
                                      </Stack__>
                                      <Button
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__fqbS
                                        )}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return $ctx.supabaseMutation.upsert(
                                                      {
                                                        table: "vendas",
                                                        upsertValues: [
                                                          {
                                                            id: currentItem.id,
                                                            status: "entregue"
                                                          }
                                                        ]
                                                      }
                                                    );
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }

                                          $steps["refreshData"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  queryInvalidation: [
                                                    "plasmic_refresh_all"
                                                  ]
                                                };
                                                return (async ({
                                                  queryInvalidation
                                                }) => {
                                                  if (!queryInvalidation) {
                                                    return;
                                                  }
                                                  await plasmicInvalidate(
                                                    queryInvalidation
                                                  );
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["refreshData"] != null &&
                                            typeof $steps["refreshData"] ===
                                              "object" &&
                                            typeof $steps["refreshData"]
                                              .then === "function"
                                          ) {
                                            $steps["refreshData"] =
                                              await $steps["refreshData"];
                                          }

                                          $steps["invokeGlobalAction"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "success",
                                                    (() => {
                                                      try {
                                                        return `Pedido ${currentItem.id} entregue`;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                      >
                                        {"ENTREGUE"}
                                      </Button>
                                    </Stack__>
                                  );
                                })}
                              </div>
                            </AntdTabItem>
                          </React.Fragment>
                        }
                        onChange={generateStateOnChangeProp($state, [
                          "tabs",
                          "activeKey"
                        ])}
                        sticky={false}
                        tabBarBackground={"#FFF"}
                        tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
                        tabsScopeClassName={sty["tabs__tabs"]}
                      />
                    )}
                  </DataCtxReader__>
                </SupabaseFetcher>
              )}
            </DataCtxReader__>
          </SupabaseMutation>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "supabaseMutation",
    "supabaseFetcher",
    "tabs"
  ],
  navigationBar: ["navigationBar"],
  supabaseMutation: ["supabaseMutation", "supabaseFetcher", "tabs"],
  supabaseFetcher: ["supabaseFetcher", "tabs"],
  tabs: ["tabs"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  supabaseMutation: typeof SupabaseMutation;
  supabaseFetcher: typeof SupabaseFetcher;
  tabs: typeof AntdTabs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdmin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdmin__VariantsArgs;
    args?: PlasmicAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdmin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdmin__ArgProps,
          internalVariantPropNames: PlasmicAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdmin";
  } else {
    func.displayName = `PlasmicAdmin.${nodeName}`;
  }
  return func;
}

export const PlasmicAdmin = Object.assign(
  // Top-level PlasmicAdmin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    supabaseMutation: makeNodeComponent("supabaseMutation"),
    supabaseFetcher: makeNodeComponent("supabaseFetcher"),
    tabs: makeNodeComponent("tabs"),

    // Metadata about props expected for PlasmicAdmin
    internalVariantProps: PlasmicAdmin__VariantProps,
    internalArgProps: PlasmicAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdmin;
/* prettier-ignore-end */
