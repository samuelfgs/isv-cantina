// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eVCRKWwcuK6xExRdUZxKpb
// Component: ZNds0ptme1kZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import { RichTable } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponent
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponentHelper
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs"; // plasmic-import: HV5Zx3YTIxFT/codeComponent
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs"; // plasmic-import: OSD--ykMTE95/codeComponent
import Button from "../../Button"; // plasmic-import: WaoscXndZ0Zl/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: CBeuHHn1qQBJ/codeComponent

import { useScreenVariants as useScreenVariantsjkjoRz1IjIaF } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JkjoRZ1ijIaF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_cantina.module.css"; // plasmic-import: eVCRKWwcuK6xExRdUZxKpb/projectcss
import sty from "./PlasmicAdmin.module.css"; // plasmic-import: ZNds0ptme1kZ/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: uqgFXbTur-qO/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: LHAURlYRDEN8/icon

createPlasmicElementProxy;

export type PlasmicAdmin__VariantMembers = {};
export type PlasmicAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdmin__VariantsArgs;
export const PlasmicAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicAdmin__ArgsType = {};
type ArgPropType = keyof PlasmicAdmin__ArgsType;
export const PlasmicAdmin__ArgProps = new Array<ArgPropType>();

export type PlasmicAdmin__OverridesType = {
  root?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  table?: p.Flex<typeof RichTable>;
  tabs?: p.Flex<typeof AntdTabs>;
};

export interface DefaultAdminProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdmin__RenderFunc(props: {
  variants: PlasmicAdmin__VariantsArgs;
  args: PlasmicAdmin__ArgsType;
  overrides: PlasmicAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec(
          "selectedRowKeys",
          RichTable_Helpers
        )
      },
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "hLw78H9DAdcctLTB5Q6jny",
        opId: "941e3615-8b19-4ad1-b50a-55a84ebff58f",
        userArgs: {},
        cacheKey: `plasmic.$.941e3615-8b19-4ad1-b50a-55a84ebff58f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjkjoRz1IjIaF()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <div className={classNames(projectcss.all, sty.freeBox__ilyy9)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__heavw)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"80px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/cantina/images/logo.png",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__faUe
                  )}
                >
                  {"CANTINA"}
                </div>
              </div>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__fxhAc)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___9WDcN
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Novo pedido"}
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__dbuXh
                  )}
                  component={Link}
                  href={`/pedidos`}
                  platform={"nextjs"}
                >
                  {"Ver todos os pedidos"}
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__tlYtO
                  )}
                  component={Link}
                  href={`/cardapio`}
                  platform={"nextjs"}
                >
                  {"Estoque"}
                </p.PlasmicLink>
              </React.Fragment>
            }
            openButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__iVzil)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.table),
              data: (() => {
                try {
                  return $queries.query;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              fields: (() => {
                const __composite = [
                  { key: "id", fieldId: "id", title: null },
                  { key: "method", fieldId: "method", isHidden: null },
                  { key: "name", fieldId: "name", dataType: null },
                  { key: "created_at", fieldId: "created_at", isHidden: null },
                  {
                    key: "lineItems",
                    fieldId: "lineItems",
                    title: null,
                    expr: null
                  },
                  {
                    key: "total",
                    fieldId: "total",
                    title: null,
                    dataType: null,
                    currency: null,
                    locale: null
                  },
                  { key: "status", fieldId: "status" }
                ];
                __composite["0"]["title"] = "Pedido";
                __composite["1"]["isHidden"] = true;
                __composite["2"]["dataType"] = "string";
                __composite["3"]["isHidden"] = true;
                __composite["4"]["title"] = "Itens";
                __composite["4"]["expr"] = (currentItem, currentValue) => {
                  return currentValue
                    ?.map(
                      lineItem =>
                        `${lineItem.qtt}x\t${lineItem.name}${
                          !lineItem.isSingle ? ` - ${lineItem.option.name}` : ""
                        }`
                    )
                    .join("\n");
                };
                __composite["5"]["title"] = "Total";
                __composite["5"]["dataType"] = "currency";
                __composite["5"]["currency"] = "BRL";
                __composite["5"]["locale"] = "pt-BR";
                return __composite;
              })(),
              onRowSelectionChanged: async (...eventArgs: any) => {
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRowKey",
                  ["table", "selectedRowKey"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRow",
                  ["table", "selectedRow"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRows",
                  ["table", "selectedRows"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRowKeys",
                  ["table", "selectedRowKeys"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
              },
              rowActions: (() => {
                const __composite = [
                  { type: null, label: null, children: null }
                ];
                __composite["0"]["type"] = "menu";
                __composite["0"]["label"] = "Alterar status";
                __composite["0"]["children"] = (() => {
                  const __composite = [
                    { label: null, onClick: null },
                    { label: null, onClick: null },
                    { label: null, onClick: null }
                  ];
                  __composite["0"]["label"] = "Preparando";
                  __composite["0"]["onClick"] = async (rowKey, row) => {
                    const $steps = {};

                    $steps["postgresUpdateById"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "hLw78H9DAdcctLTB5Q6jny",
                              opId: "e9fbef0a-55ab-4397-bf0a-fb390e045620",
                              userArgs: {
                                keys: [row.id]
                              },
                              cacheKey: `plasmic.$.e9fbef0a-55ab-4397-bf0a-fb390e045620.$.`,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      typeof $steps["postgresUpdateById"] === "object" &&
                      typeof $steps["postgresUpdateById"].then === "function"
                    ) {
                      $steps["postgresUpdateById"] = await $steps[
                        "postgresUpdateById"
                      ];
                    }
                  };
                  __composite["1"]["label"] = "Pronto";
                  __composite["1"]["onClick"] = async (rowKey, row) => {
                    const $steps = {};

                    $steps["postgresUpdateById"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "hLw78H9DAdcctLTB5Q6jny",
                              opId: "8fab87d7-e3df-47dc-84ec-285e32d52644",
                              userArgs: {
                                keys: [row.id]
                              },
                              cacheKey: `plasmic.$.8fab87d7-e3df-47dc-84ec-285e32d52644.$.`,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      typeof $steps["postgresUpdateById"] === "object" &&
                      typeof $steps["postgresUpdateById"].then === "function"
                    ) {
                      $steps["postgresUpdateById"] = await $steps[
                        "postgresUpdateById"
                      ];
                    }
                  };
                  __composite["2"]["label"] = "Entregue";
                  __composite["2"]["onClick"] = async (rowKey, row) => {
                    const $steps = {};

                    $steps["postgresUpdateById"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "hLw78H9DAdcctLTB5Q6jny",
                              opId: "b5e6bab0-8e8b-40d6-b40c-f2d270ef8cd9",
                              userArgs: {
                                keys: [row.id]
                              },
                              cacheKey: `plasmic.$.b5e6bab0-8e8b-40d6-b40c-f2d270ef8cd9.$.`,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      typeof $steps["postgresUpdateById"] === "object" &&
                      typeof $steps["postgresUpdateById"].then === "function"
                    ) {
                      $steps["postgresUpdateById"] = await $steps[
                        "postgresUpdateById"
                      ];
                    }
                  };
                  return __composite;
                })();
                return __composite;
              })(),
              scopeClassName: sty["table__instance"],
              selectedRowKey: p.generateStateValueProp($state, [
                "table",
                "selectedRowKey"
              ]),
              selectedRowKeys: p.generateStateValueProp($state, [
                "table",
                "selectedRowKeys"
              ]),
              themeResetClassName: classNames(
                projectcss.root_reset,
                projectcss.root_reset_tags,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )
            };
            p.initializeCodeComponentStates(
              $state,
              [
                {
                  name: "selectedRowKey",
                  plasmicStateName: "table.selectedRowKey"
                },
                {
                  name: "selectedRow",
                  plasmicStateName: "table.selectedRow"
                },
                {
                  name: "selectedRows",
                  plasmicStateName: "table.selectedRows"
                },
                {
                  name: "selectedRowKeys",
                  plasmicStateName: "table.selectedRowKeys"
                }
              ],
              [],
              RichTable_Helpers ?? {},
              child$Props
            );

            return (
              <RichTable
                data-plasmic-name={"table"}
                data-plasmic-override={overrides.table}
                {...child$Props}
              />
            );
          })()}
          <AntdTabs
            data-plasmic-name={"tabs"}
            data-plasmic-override={overrides.tabs}
            activeKey={p.generateStateValueProp($state, ["tabs", "activeKey"])}
            animateTabBar={true}
            animateTabContent={false}
            animated={true}
            className={classNames("__wab_instance", sty.tabs)}
            items={
              <React.Fragment>
                <AntdTabItem
                  className={classNames("__wab_instance", sty.tabItem__lRa0V)}
                  key={"preparando"}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lsGqU
                      )}
                    >
                      {"PREPARANDO"}
                    </div>
                  }
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iltgf)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.query.data.filter(
                            row => row.status === "preparando"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jR11H
                          )}
                          key={currentIndex}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kLcj0
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___97Dst
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vt4Vs
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wb7Ju
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>{""}</React.Fragment>
                                {
                                  <ul
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.ul,
                                      sty.ul__vCya0
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return currentItem.lineItems;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_1, __plasmic_idx_1) => {
                                        const lineItem = __plasmic_item_1;
                                        const currentIndex = __plasmic_idx_1;
                                        return (
                                          <li
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.li,
                                              projectcss.__wab_text,
                                              sty.li__zjxog
                                            )}
                                            key={currentIndex}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return `${lineItem.qtt}x  ${
                                                    lineItem.name
                                                  }${
                                                    !lineItem.isSingle
                                                      ? ` - ${lineItem.option.name}`
                                                      : ""
                                                  }`;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </li>
                                        );
                                      }
                                    )}
                                  </ul>
                                }
                                <React.Fragment>{""}</React.Fragment>
                              </React.Fragment>
                            </div>
                          </p.Stack>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__zq1N6
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["postgresUpdateById"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "hLw78H9DAdcctLTB5Q6jny",
                                        opId: "8fab87d7-e3df-47dc-84ec-285e32d52644",
                                        userArgs: {
                                          keys: [currentItem.id]
                                        },
                                        cacheKey: `plasmic.$.8fab87d7-e3df-47dc-84ec-285e32d52644.$.`,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            }}
                          >
                            {"PRONTO"}
                          </Button>
                        </p.Stack>
                      );
                    })}
                  </div>
                </AntdTabItem>
                <AntdTabItem
                  className={classNames("__wab_instance", sty.tabItem__znL1Z)}
                  key={"pronto"}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9WYr3
                      )}
                    >
                      {"PRONTO"}
                    </div>
                  }
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__v7R5)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.query.data.filter(
                            row => row.status === "pronto"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__x2Toe
                          )}
                          key={currentIndex}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tqJpE
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0Cl2W
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uYoB3
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8Bz6
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>{""}</React.Fragment>
                                {
                                  <ul
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.ul,
                                      sty.ul__v2GA
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return currentItem.lineItems;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_1, __plasmic_idx_1) => {
                                        const lineItem = __plasmic_item_1;
                                        const currentIndex = __plasmic_idx_1;
                                        return (
                                          <li
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.li,
                                              projectcss.__wab_text,
                                              sty.li___8W5J7
                                            )}
                                            key={currentIndex}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return `${lineItem.qtt}x  ${
                                                    lineItem.name
                                                  }${
                                                    !lineItem.isSingle
                                                      ? ` - ${lineItem.option.name}`
                                                      : ""
                                                  }`;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </li>
                                        );
                                      }
                                    )}
                                  </ul>
                                }
                                <React.Fragment>{""}</React.Fragment>
                              </React.Fragment>
                            </div>
                          </p.Stack>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__fqbS
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["postgresUpdateById"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "hLw78H9DAdcctLTB5Q6jny",
                                        opId: "b5e6bab0-8e8b-40d6-b40c-f2d270ef8cd9",
                                        userArgs: {
                                          keys: [currentItem.id]
                                        },
                                        cacheKey: `plasmic.$.b5e6bab0-8e8b-40d6-b40c-f2d270ef8cd9.$.`,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            }}
                          >
                            {"ENTREGUE"}
                          </Button>
                        </p.Stack>
                      );
                    })}
                  </div>
                </AntdTabItem>
                <AntdTabItem
                  className={classNames("__wab_instance", sty.tabItem__i4YM0)}
                  key={"entregue"}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y110C
                      )}
                    >
                      {"ENTREGUE"}
                    </div>
                  }
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xttgJ)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.query.data.filter(
                            row => row.status === "entregue"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pp4L3
                          )}
                          key={currentIndex}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__npoJ6
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3PLvo
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uoVqZ
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3Afhq
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>{""}</React.Fragment>
                                {
                                  <ul
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.ul,
                                      sty.ul__l8E9O
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return currentItem.lineItems;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_1, __plasmic_idx_1) => {
                                        const lineItem = __plasmic_item_1;
                                        const currentIndex = __plasmic_idx_1;
                                        return (
                                          <li
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.li,
                                              projectcss.__wab_text,
                                              sty.li__uS78W
                                            )}
                                            key={currentIndex}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return `${lineItem.qtt}x  ${
                                                    lineItem.name
                                                  }${
                                                    !lineItem.isSingle
                                                      ? ` - ${lineItem.option.name}`
                                                      : ""
                                                  }`;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </li>
                                        );
                                      }
                                    )}
                                  </ul>
                                }
                                <React.Fragment>{""}</React.Fragment>
                              </React.Fragment>
                            </div>
                          </p.Stack>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__qQv2F
                            )}
                          >
                            {"ENTREGUE"}
                          </Button>
                        </p.Stack>
                      );
                    })}
                  </div>
                </AntdTabItem>
              </React.Fragment>
            }
            onChange={p.generateStateOnChangeProp($state, [
              "tabs",
              "activeKey"
            ])}
            sticky={false}
            tabBarBackground={"#FFF"}
            tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
            tabsScopeClassName={sty["tabs__tabs"]}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "table", "tabs"],
  navigationBar: ["navigationBar"],
  table: ["table"],
  tabs: ["tabs"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  table: typeof RichTable;
  tabs: typeof AntdTabs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdmin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdmin__VariantsArgs;
    args?: PlasmicAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdmin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAdmin__ArgProps,
          internalVariantPropNames: PlasmicAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdmin";
  } else {
    func.displayName = `PlasmicAdmin.${nodeName}`;
  }
  return func;
}

export const PlasmicAdmin = Object.assign(
  // Top-level PlasmicAdmin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    table: makeNodeComponent("table"),
    tabs: makeNodeComponent("tabs"),

    // Metadata about props expected for PlasmicAdmin
    internalVariantProps: PlasmicAdmin__VariantProps,
    internalArgProps: PlasmicAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdmin;
/* prettier-ignore-end */
